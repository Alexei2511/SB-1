using System;
private int testSudoku(int[] mas0, int c, bool debug, bool write_in_file, int max)
{
	return testSudoku(mas0, c, debug, write_in_file, max, "");
}
private int testSudoku(int[] mas0, int c, bool debug, bool write_in_file)
{
	return testSudoku(mas0, c, debug, write_in_file, 0, "");
}
private int testSudoku(int[] mas0, int c, bool debug)
{
	return testSudoku(mas0, c, debug, true, 0, "");
}
private int testSudoku(int[] mas0, int c)
{
	return testSudoku(mas0, c, false, true, 0, "");
}
private int testSudoku(int[] mas0)
{
	return testSudoku(mas0, 3, false, true, 0, "");
}
//C++ TO C# CONVERTER NOTE: Overloaded method(s) are created above to convert the following method having default parameters:
//ORIGINAL LINE: int testSudoku(int *mas0, int c = 3, bool debug = false, bool write_in_file = true, int max = 0, string fn="")
private int testSudoku(int[] mas0, int c, bool debug, bool write_in_file, int max, string fn)
{
	int c2 = c *c;
	int c3 = c *c *c;
	int c4 = c *c *c *c;
	int i;
	int j;
	int k;
	int l;
	int mod;
	int v;
	int col;
	int row;
	int box;
	int[] mas = new int[c4];
	int[] test = new int[3 *c4];
	bool b;
	string fname;
	FILE f;
	// заполняем таблицу
	for(i = 0; i < c4; i++)
		mas[i] = ((mas0[i] > 0) || (mas0[i] <= c2))? mas0[i] : 0;
	// имя файла в который идет запись
	if(write_in_file)
	{
		if(fn == "")
		{
			l = c4 + 6;
//C++ TO C# CONVERTER TODO TASK: The memory management function 'malloc' has no equivalent in C#:
			fname = (string)malloc(l + 1);
			for(i = 0; i < c4; i++)
				fname = StringHelper.ChangeCharacter(fname, i, '0' + mas[i]);
			fname.Substring(c4) = ".table";
			fname = StringHelper.ChangeCharacter(fname, l, '\0');
		}
		else
		{
			l = fn.Length;
//C++ TO C# CONVERTER TODO TASK: The memory management function 'malloc' has no equivalent in C#:
			fname = (string)malloc(l + 1);
			fname = fn;
			fname = StringHelper.ChangeCharacter(fname, l, '\0');
		}
		f = fopen(fname, "w");
//C++ TO C# CONVERTER TODO TASK: The memory management function 'free' has no equivalent in C#:
		free(fname);
	}
	// проверка на валидность таблицы
	for(i = 0; i < 3 * c4; i++)
		test[i] = 1;
	for(i = 0; i < c4; i++)
	{
		v = mas[i] - 1;
		if(v >= 0)
		{
			col = i % c2;
			row = (int)(i / c2);
			box = (int)(col / c) + (int)(row / c) * c;
			test[col * c2 + v]--;
			test[c4 + row * c2 + v]--;
			test[2 * c4 + box * c2 + v]--;
		}
	}
	// если таблица невалидна вернуть -1
	for(i = 0; i < 3 * c4; i++)
		if(test[i] < 0)
			return -1;
	// заполняем таблицу неизменными базовыми числами и значениями по умолчанию
	for(i = 0; i < c4; i++)
		mas[i] = (mas0[i] && (mas0[i] >= -c2) && (mas0[i] <= c2))? mas0[i] : -c2;
	// итеративный обход полей таблицы
	// обход происходит в прямом порядке позиций 0,1,2,3,4,...,80
	//                и в прямом порядке чисел -9,-8,-7,-6,-5,...,-1
	for(i = 0, k = 0, mod = 0; i >= 0;)
	{
		if(i == c4)
		{
			// если решение найдено
			k++;
			if (max != 0)
				if(k > max)
				{
					if(debug)
						Console.Write("max\n",k);
					break;
				}
			if(debug)
				Console.Write("{0:D})\n",k);
			if(write_in_file)
				fprintf(f, "%d)\n", k);
			for(j = 0; j < c4;)
			{
				if(debug)
					Console.Write("{0,2:D}", mas[j]);
				if(write_in_file)
					fprintf(f, "%2d", mas[j]);
				j++;
				if(!(j % c2))
				{
					if(debug)
						Console.Write("\n");
					if(write_in_file)
						fprintf(f, "\n");
				}
			}
			if(debug)
				Console.Write("\n");
			if(write_in_file)
				fprintf(f, "\n");
			i--;
			mod = 1;
		}
		else if(mas[i] > 0)
		{
			// если текущий элемент на i-ой позиции - неизменный
			if (mod != 0)
				i--;
			else
				i++;
		}
		else
		{
			// найти новый подходящий элемент на i-ой позиции
			b = false;
			col = i % c2;
			row = (int)(i / c2);
			box = (int)(col / c) + (int)(row / c) * c;
			v = Math.Abs(mas[i]);
			if (mod != 0)
			{
				// если переход в i-ую позицию произошел из i+1-ой, сменить значение элемента на i-ой позиции
				v--;
				// сделать прошлое значение доступным для следующего выбора
				test[col * c2 + v] = test[c4 + row * c2 + v] = test[2 * c4 + box * c2 + v] = 1;
			}
			if (v != 0)
				do
				{
					v--;
					// проверка удовлетворяет ли искомый элемент условия выбора
					if(test[col * c2 + v])
						if(test[c4 + row * c2 + v])
							if(test[2 * c4 + box * c2 + v])
								b = true;
				}while(!b && (v > 0));
			if(b)
			{
				// удовлетворяет, перейти на i+1-ую позицию
				test[col * c2 + v] = test[c4 + row * c2 + v] = test[2 * c4 + box * c2 + v] = 0;
				mas[i] = -v - 1;
				mod = 0;
				i++;
			}
			else
			{
				// не удовлетворяет, откат на i-1-ую позицию
				mod = 1;
				mas[i] = -c2;
				i--;
			}
		}
	}
	if(write_in_file)
		fclose(f);
	mas = null;
	// вернуть количество результатов
	return k;
}
//----------------------------------------------------------------------------------------
//	Copyright © 2006 - 2009 Tangible Software Solutions Inc.
//	This class can be used by anyone provided that the copyright notice remains intact.
//
//	This class provides miscellaneous helper methods for strings.
//----------------------------------------------------------------------------------------
internal static class StringHelper
{
	//------------------------------------------------------------------------------------
	//	This method allows replacing a single character in a string, to help convert
	//	C++ code where a single character in a character array is replaced.
	//------------------------------------------------------------------------------------
	internal static string ChangeCharacter(string sourcestring, int charindex, char changechar)
	{
		return (charindex > 0 ? sourcestring.Substring(0, charindex) : "")
			+ changechar.ToString() + (charindex < sourcestring.Length - 1 ? sourcestring.Substring(charindex + 1) : "");
	}
}